import random
import time
import turtle

#score
first = 0
second = 0
third = 0
name1 = "not_a_name"
name2 = "not_a_name"
name3 = "not_a_name"

while True:
 while True:

 #turtle stuff

  turtle.bgcolor("black")
  reactor_temp_indicator = turtle.Turtle()
  reactor_temp_indicator_text = turtle.Turtle()
  reactor_temp_indicator.color("#550000")
  reactor_temp_indicator.pensize(7)
  reactor_temp_indicator.shape("square")
  reactor_temp_indicator.penup()
  reactor_temp_indicator.setposition(-300, 300)
  reactor_temp_indicator.shapesize(6)
  reactor_temp_indicator.pendown()
  reactor_temp_indicator_text.penup()
  reactor_temp_indicator_text.setposition(-300, 275)
  reactor_temp_indicator_text.pendown()
  reactor_temp_indicator_text.hideturtle()
  reactor_temp_indicator_text.write("reactor temp\n       high" , False , 'center', font=('sans' , 14 , 'bold'))

  button_reactor_on_indicator = turtle.Turtle()
  button_reactor_on_indicator_text = turtle.Turtle()
  button_reactor_on_indicator.color("#004000")
  button_reactor_on_indicator.pensize(7)
  button_reactor_on_indicator.shape("square")
  button_reactor_on_indicator.penup()
  button_reactor_on_indicator.setposition(-175, 300)
  button_reactor_on_indicator.shapesize(6)
  button_reactor_on_indicator.pendown()
  button_reactor_on_indicator_text.penup()
  button_reactor_on_indicator_text.setposition(-175, 275)
  button_reactor_on_indicator_text.pendown()
  button_reactor_on_indicator_text.hideturtle()
  button_reactor_on_indicator_text.write("reactor \n online" , False , 'center', font=('sans' , 14 , 'bold'))

  steam_valve_pressure_indicator = turtle.Turtle()
  steam_valve_pressure_indicator_text = turtle.Turtle()
  steam_valve_pressure_indicator.color("#550000")
  steam_valve_pressure_indicator.pensize(7)
  steam_valve_pressure_indicator.shape("square")
  steam_valve_pressure_indicator.penup()
  steam_valve_pressure_indicator.setposition(-50, 300)
  steam_valve_pressure_indicator.shapesize(6)
  steam_valve_pressure_indicator.pendown()
  steam_valve_pressure_indicator_text.penup()
  steam_valve_pressure_indicator_text.setposition(-50, 270)
  steam_valve_pressure_indicator_text.pendown()
  steam_valve_pressure_indicator_text.hideturtle()
  steam_valve_pressure_indicator_text.write(" high steam \n     valve \n  pressure" , False , 'center', font=('sans' , 14 , 'bold'))

  output_power_indicator = turtle.Turtle()
  output_power_indicator_text = turtle.Turtle()
  output_power_indicator.color("#550000")
  output_power_indicator.pensize(7)
  output_power_indicator.shape("square")
  output_power_indicator.penup()
  output_power_indicator.setposition(75, 300)
  output_power_indicator.shapesize(6)
  output_power_indicator.pendown()
  output_power_indicator_text.penup()
  output_power_indicator_text.setposition(75, 275)
  output_power_indicator_text.pendown()
  output_power_indicator_text.hideturtle()
  output_power_indicator_text.write(" high output \n     power" , False , 'center', font=('sans' , 14 , 'bold'))

  generator_on_indicator = turtle.Turtle()
  generator_on_indicator_text = turtle.Turtle()
  generator_on_indicator.color("#004000")
  generator_on_indicator.pensize(7)
  generator_on_indicator.shape("square")
  generator_on_indicator.penup()
  generator_on_indicator.setposition(200, 300)
  generator_on_indicator.shapesize(6)
  generator_on_indicator.pendown()
  generator_on_indicator_text.penup()
  generator_on_indicator_text.setposition(200, 275)
  generator_on_indicator_text.pendown()
  generator_on_indicator_text.hideturtle()
  generator_on_indicator_text.write("generator \n   online" , False , 'center', font=('sans' , 14 , 'bold'))

  coolant_temp_indicator = turtle.Turtle()
  coolant_temp_indicator_text = turtle.Turtle()
  coolant_temp_indicator.color("#550000")
  coolant_temp_indicator.pensize(7)
  coolant_temp_indicator.shape("square")
  coolant_temp_indicator.penup()
  coolant_temp_indicator.setposition(325, 300)
  coolant_temp_indicator.shapesize(6)
  coolant_temp_indicator.pendown()
  coolant_temp_indicator_text.penup()
  coolant_temp_indicator_text.setposition(325, 280)
  coolant_temp_indicator_text.pendown()
  coolant_temp_indicator_text.hideturtle()
  coolant_temp_indicator_text.write("high coolant\n       temp" , False , 'center', font=('sans' , 14 , 'bold'))

  button_coolant_pump_indicator = turtle.Turtle()
  button_coolant_pump_indicator_text = turtle.Turtle()
  button_coolant_pump_indicator.color("#004000")
  button_coolant_pump_indicator.pensize(7)
  button_coolant_pump_indicator.shape("square")
  button_coolant_pump_indicator.penup()
  button_coolant_pump_indicator.setposition(-300, 150)
  button_coolant_pump_indicator.shapesize(6)
  button_coolant_pump_indicator.pendown()
  button_coolant_pump_indicator_text.penup()
  button_coolant_pump_indicator_text.setposition(-300, 130)
  button_coolant_pump_indicator_text.pendown()
  button_coolant_pump_indicator_text.hideturtle()
  button_coolant_pump_indicator_text.write("coolant\n  pump" , False , 'center', font=('sans' , 14 , 'bold'))

  turbine_rpm_indicator = turtle.Turtle()
  turbine_rpm_indicator_text = turtle.Turtle()
  turbine_rpm_indicator.color("#550000")
  turbine_rpm_indicator.pensize(7)
  turbine_rpm_indicator.shape("square")
  turbine_rpm_indicator.penup()
  turbine_rpm_indicator.setposition(-175, 150)
  turbine_rpm_indicator.shapesize(6)
  turbine_rpm_indicator.pendown()
  turbine_rpm_indicator_text.penup()
  turbine_rpm_indicator_text.setposition(-175, 130)
  turbine_rpm_indicator_text.pendown()
  turbine_rpm_indicator_text.hideturtle()
  turbine_rpm_indicator_text.write("      high \n turbine rpm" , False , 'center', font=('sans' , 14 , 'bold'))

  reactor_scram = turtle.Turtle()
  reactor_scram_text = turtle.Turtle()
  reactor_scram.color("#550000")
  reactor_scram.pensize(7)
  reactor_scram.shape("square")
  reactor_scram.penup()
  reactor_scram.setposition(-50, 150)
  reactor_scram.shapesize(6)
  reactor_scram.pendown()
  reactor_scram_text.penup()
  reactor_scram_text.setposition(-50, 130)
  reactor_scram_text.pendown()
  reactor_scram_text.hideturtle()
  reactor_scram_text.write("reactor\n scram" , False , 'center', font=('sans' , 14 , 'bold'))

  steam_valve_open = turtle.Turtle()
  steam_valve_open_text = turtle.Turtle()
  steam_valve_open.color("#004000")
  steam_valve_open.pensize(7)
  steam_valve_open.shape("square")
  steam_valve_open.penup()
  steam_valve_open.setposition(75, 150)
  steam_valve_open.shapesize(6)
  steam_valve_open.pendown()
  steam_valve_open_text.penup()
  steam_valve_open_text.setposition(75, 130)
  steam_valve_open_text.pendown()
  steam_valve_open_text.hideturtle()
  steam_valve_open_text.write("steam valve\n      open" , False , 'center', font=('sans' , 14 , 'bold'))

  turbine_online = turtle.Turtle()
  turbine_online_text = turtle.Turtle()
  turbine_online.color("#004000")
  turbine_online.pensize(7)
  turbine_online.shape("square")
  turbine_online.penup()
  turbine_online.setposition(200, 150)
  turbine_online.shapesize(6)
  turbine_online.pendown()
  turbine_online_text.penup()
  turbine_online_text.setposition(200, 130)
  turbine_online_text.pendown()
  turbine_online_text.hideturtle()
  turbine_online_text.write("turbine\n online" , False , 'center', font=('sans' , 14 , 'bold'))

  turbine_trip = turtle.Turtle()
  turbine_trip_text = turtle.Turtle()
  turbine_trip.color("#550000")
  turbine_trip.pensize(7)
  turbine_trip.shape("square")
  turbine_trip.penup()
  turbine_trip.setposition(325, 150)
  turbine_trip.shapesize(6)
  turbine_trip.pendown()
  turbine_trip_text.penup()
  turbine_trip_text.setposition(325, 130)
  turbine_trip_text.pendown()
  turbine_trip_text.hideturtle()
  turbine_trip_text.write("turbine\n   trip" , False , 'center', font=('sans' , 14 , 'bold'))

  reactor_temp_str = "0"

  reactor_temp_display = turtle.Turtle()
  reactor_temp_display_text = turtle.Turtle()
  reactor_temp_display.color("#606060")
  reactor_temp_display.pensize(7)
  reactor_temp_display.shape("square")
  reactor_temp_display.penup()
  reactor_temp_display.setposition(-300, 0)
  reactor_temp_display.shapesize(6)
  reactor_temp_display.pendown()
  reactor_temp_display_text.penup()
  reactor_temp_display_text.setposition(-300, -20)
  reactor_temp_display_text.pendown()
  reactor_temp_display_text.hideturtle()
  reactor_temp_display_text.write("reactor temp\n           " + str(reactor_temp_str) , False , 'center', font=('sans' , 14 , 'bold'))

  steam_valve_pressure_str = "0"

  steam_valve_pressure_dispay = turtle.Turtle()
  steam_valve_pressure_dispay_text = turtle.Turtle()
  steam_valve_pressure_dispay.color("#606060")
  steam_valve_pressure_dispay.pensize(7)
  steam_valve_pressure_dispay.shape("square")
  steam_valve_pressure_dispay.penup()
  steam_valve_pressure_dispay.setposition(-175, 0)
  steam_valve_pressure_dispay.shapesize(6)
  steam_valve_pressure_dispay.pendown()
  steam_valve_pressure_dispay_text.penup()
  steam_valve_pressure_dispay_text.setposition(-175, -30)
  steam_valve_pressure_dispay_text.pendown()
  steam_valve_pressure_dispay_text.hideturtle()
  steam_valve_pressure_dispay_text.write("steam valve\n   pressure\n          " + str(steam_valve_pressure_str) , False , 'center', font=('sans' , 14 , 'bold'))

  coolant_temp_str = "0"

  coolant_temp_display = turtle.Turtle()
  coolant_temp_display_text = turtle.Turtle()
  coolant_temp_display.color("#606060")
  coolant_temp_display.pensize(7)
  coolant_temp_display.shape("square")
  coolant_temp_display.penup()
  coolant_temp_display.setposition(-50, 0)
  coolant_temp_display.shapesize(6)
  coolant_temp_display.pendown()
  coolant_temp_display_text.penup()
  coolant_temp_display_text.setposition(-50, -20)
  coolant_temp_display_text.pendown()
  coolant_temp_display_text.hideturtle()
  coolant_temp_display_text.write("coolant temp\n         " + str(coolant_temp_str) , False , 'center', font=('sans' , 14 , 'bold'))

  turbine_rpm_str = "0"

  turbine_rpm_display = turtle.Turtle()
  turbine_rpm_display_text = turtle.Turtle()
  turbine_rpm_display.color("#606060")
  turbine_rpm_display.pensize(7)
  turbine_rpm_display.shape("square")
  turbine_rpm_display.penup()
  turbine_rpm_display.setposition(75, 0)
  turbine_rpm_display.shapesize(6)
  turbine_rpm_display.pendown()
  turbine_rpm_display_text.penup()
  turbine_rpm_display_text.setposition(75, -20)
  turbine_rpm_display_text.pendown()
  turbine_rpm_display_text.hideturtle()
  turbine_rpm_display_text.write("turbine rpm\n        " + str(turbine_rpm_str) , False , 'center', font=('sans' , 14 , 'bold'))

  output_power_str = "0"

  output_power_display = turtle.Turtle()
  output_power_display_text = turtle.Turtle()
  output_power_display.color("#606060")
  output_power_display.pensize(7)
  output_power_display.shape("square")
  output_power_display.penup()
  output_power_display.setposition(200, 0)
  output_power_display.shapesize(6)
  output_power_display.pendown()
  output_power_display_text.penup()
  output_power_display_text.setposition(200, -20)
  output_power_display_text.pendown()
  output_power_display_text.hideturtle()
  output_power_display_text.write("output power\n         " + str(output_power_str) , False , 'center', font=('sans' , 14 , 'bold'))

  coolant_trip = turtle.Turtle()
  coolant_trip_text = turtle.Turtle()
  coolant_trip.color("#550000")
  coolant_trip.pensize(7)
  coolant_trip.shape("square")
  coolant_trip.penup()
  coolant_trip.setposition(325, 0)
  coolant_trip.shapesize(6)
  coolant_trip.pendown()
  coolant_trip_text.penup()
  coolant_trip_text.setposition(325, -30)
  coolant_trip_text.pendown()
  coolant_trip_text.hideturtle()
  coolant_trip_text.write("coolant\n  pump\n    trip" , False , 'center', font=('sans' , 14 , 'bold'))


  #control variable list
  fuel_rod_control = 0
  primary_coolant_control = 0
  steam_flow_turbine = 0
  button_reactor_on = 0
  button_coolant_pump = 0
  generator_on = 0
  turbine_start = 0

  #output variable list
  reactor_temp = 0
  steam_valve_pressure = 0
  turbine_rpm = 0
  output_power = 0
  coolant_temp = 0

  #percentage variables
  fuel_rod_position = 0
  primary_coolant_position = 0
  steam_flow_turbine_position = 0

  #extra variables
  total_time = 0
  wait_time = 0
  loop_game = False
  loop_beta = False
  loop_gamma = False
  game_over = False
  money_made = 0


  #introduction
  time.sleep(0.5)
  print("hello. you have been asked to control a nuclear reactor. \nyour goal is to run the power plant for as long as you \ncan without going into a meltdown.")
  time.sleep(4)
  print("\nwhat things do: fuel_rod_control: will control the temp of the reactor\n                primary_coolant_control: will help control the temp of the reactor\n                steam_flow_turbine: will allow steam into the turbine to create power\n\n")
  time.sleep(4)
  loop_game = True
  loop_gamma = True
  #game starts
  while loop_game is True:
   while loop_gamma is True:
    print("commands:    fuel_rod_control = FRC \n             primary_coolant_control = PCC\n             steam_flow_turbine = SFT\n             button_reactor_on = BRO\n             button_coolant_pump = BCP\n             generator_on = GO\n             turbine_start = TS\n(use caps)\n")
    time.sleep(2)
    control = input("input-->")
    if control == "FRC":
        loop_beta = True
        while loop_beta is True:
         fuel_rod_position = int(input("give the position between 1 and 100: "))
         if fuel_rod_position > 100 or fuel_rod_position < 0:
            time.sleep(1)
            print("please only be between 0 and 100")
            time.sleep(1)
         else:
          loop_beta = False
          time.sleep(1.5)
          loop_beta = True
          while loop_beta is True:
            wait_time = int(input("how long do you want to wait? max = 10: "))
            if wait_time > 10 or wait_time < 0:
              time.sleep(1)
              print("please only be between 0 and 10")
              time.sleep(1)
            else:
              loop_beta = False
              loop_gamma = False
              time.sleep(1.5)
    elif control == "PCC":
           loop_beta = True
           while loop_beta is True:
              primary_coolant_position = int(input("give the position between 1 and 100: "))
              if primary_coolant_position > 100 or primary_coolant_position < 0:
                 time.sleep(1)
                 print("please only be between 0 and 100")
                 time.sleep(1)
              else:
               loop_beta = False
               time.sleep(1.5)
               loop_beta = True
               while loop_beta is True:
                 wait_time = int(input("how long do you want to wait? max = 10: "))
                 if wait_time > 10 or wait_time < 0:
                   time.sleep(1)
                   print("please only be between 0 and 10")
                   time.sleep(1)
                 else:
                     loop_beta = False
                     loop_gamma = False
                     time.sleep(1.5)
    elif control == "SFT":
          loop_beta = True
          while loop_beta is True:
             steam_flow_turbine_position = int(input("give the position between 1 and 80: "))
             if steam_flow_turbine_position > 80 or steam_flow_turbine_position < 0:
                time.sleep(1)
                print("please only be between 0 and 80")
                time.sleep(1)
             else:
              loop_beta = False
              time.sleep(1.5)
          loop_beta = True
          while loop_beta is True:
             wait_time = int(input("how long do you want to wait? max = 10: "))
             if wait_time > 10 or wait_time < 0:
                time.sleep(1)
                print("please only be between 0 and 10")
                time.sleep(1)
             else:
              loop_beta = False
              loop_gamma = False
              time.sleep(1.5)
    elif control == "BRO":
        loop_beta = True
        while loop_beta is True:
           button_reactor_on = int(input("1 = on, 0 = off: "))
           if button_reactor_on > 1 or button_reactor_on < 0:
              time.sleep(1)
              print("please only be 1 or 0")
              time.sleep(1)
           else:
            wait_time = 1
            loop_beta = False
            loop_gamma = False
            time.sleep(1.5)

    elif control == "BCP":
           loop_beta = True
           while loop_beta is True:
              button_coolant_pump = int(input("1 = on, 0 = off: "))
              if button_coolant_pump > 1 or button_coolant_pump < 0:
                 time.sleep(1)
                 print("please only be 1 or 0")
                 time.sleep(1)
              else:
               wait_time = 1
               loop_beta = False
               loop_gamma = False
               time.sleep(1.5)

    elif control == "GO":
        loop_beta = True
        while loop_beta is True:
           generator_on = int(input("1 = on, 0 = off: "))
           if generator_on > 1 or generator_on < 0:
              time.sleep(1)
              print("please only be 1 or 0")
              time.sleep(1)
           else:
            wait_time = 1
            loop_beta = False
            loop_gamma = False
            time.sleep(1.5)
    elif control == "TS":
        loop_beta = True
        while loop_beta is True:
           turbine_start = int(input("1 = on, 0 = off: "))
           if turbine_start > 1 or turbine_start < 0:
              time.sleep(1)
              print("please only be 1 or 0")
              time.sleep(1)
           else:
            wait_time = 1
            loop_beta = False
            loop_gamma = False
            time.sleep(1.5)

    else:
        print("please only give the commands shown")
        time.sleep(1)

    #if buttons are pressed, change variables

   if button_reactor_on == 0:
       fuel_rod_position = 0
   if button_coolant_pump == 0:
       primary_coolant_position = 0
   if generator_on == 0:
       output_power = 0


    #algorythem to calculate things

   total_time = wait_time + total_time
   if primary_coolant_position - coolant_temp < 0:
       reactor_temp = (reactor_temp + (fuel_rod_position - 0) * wait_time) - 25
   else:
      reactor_temp = (reactor_temp + (fuel_rod_position - (primary_coolant_position - coolant_temp)) * wait_time) - 25 * wait_time
   if primary_coolant_position == 0:
       coolant_temp = 0
   else:
      coolant_temp = (((primary_coolant_position - 100) *-1) / 111.111111111111111111111111111111111111111111111111111111111) * reactor_temp
   steam_valve_pressure = (((steam_flow_turbine_position - 100) *-1) / 130) * reactor_temp
   turbine_rpm = (steam_valve_pressure * steam_flow_turbine_position) / 2.10243
   if turbine_start == 0:
       turbine_rpm = 0
   output_power = turbine_rpm / 1.09361111
   money_made = (money_made + output_power * wait_time) / 100

   if reactor_temp <= 0:
        reactor_temp = 0
   if steam_valve_pressure < 0:
        steam_valve_pressure = 0
   if turbine_rpm < 0:
        turbine_rpm = 0
   if output_power < 0:
        output_power = 0
   if coolant_temp < 0:
        coolant_temp = 0
   if turbine_start == 0:
       turbine_rpm = 0
   if generator_on == 0:
       output_power = 0

   print("--CALCULATING--")
   time.sleep(3)
   print("--AQUIRING_DATA--")
   time.sleep(1)
   print("--PROCESING_DATA--")
   time.sleep(5)
   print("--PROCESS_COMPLETE-- \n")
   time.sleep(1)

   if reactor_temp > 650:
     reactor_temp_indicator.color("red")
     reactor_temp_indicator_text.write("reactor temp\n       high" , False , 'center', font=('sans' , 14 , 'bold'))
   else:
       reactor_temp_indicator.color("#550000")
       reactor_temp_indicator_text.write("reactor temp\n       high" , False , 'center', font=('sans' , 14 , 'bold'))

   if button_reactor_on == 1:
       button_reactor_on_indicator.color("green")
       button_reactor_on_indicator_text.write("reactor \n online" , False , 'center', font=('sans' , 14 , 'bold'))
       reactor_scram.color("#550000")
       reactor_scram_text.write("reactor\n scram" , False , 'center', font=('sans' , 14 , 'bold'))
   else:
       button_reactor_on_indicator.color("#004000")
       button_reactor_on_indicator_text.write("reactor \n online" , False , 'center', font=('sans' , 14 , 'bold'))

   if steam_valve_pressure > 500:
       steam_valve_pressure_indicator.color("red")
       steam_valve_pressure_indicator_text.write(" high steam \n     valve \n  pressure" , False , 'center', font=('sans' , 14 , 'bold'))
   else:
       steam_valve_pressure_indicator.color("#550000")
       steam_valve_pressure_indicator_text.write(" high steam \n     valve \n  pressure" , False , 'center', font=('sans' , 14 , 'bold'))

   if output_power > 5900:
       output_power_indicator.color("red")
       output_power_indicator_text.write(" high output \n     power" , False , 'center', font=('sans' , 14 , 'bold'))
   else:
       output_power_indicator.color("#550000")
       output_power_indicator_text.write(" high output \n     power" , False , 'center', font=('sans' , 14 , 'bold'))

   if  generator_on == 1:
       generator_on_indicator.color("green")
       generator_on_indicator_text.write("generator \n   online" , False , 'center', font=('sans' , 14 , 'bold'))
       time.sleep(1)
   else:
       generator_on_indicator.color("#004000")
       generator_on_indicator_text.write("generator \n   online" , False , 'center', font=('sans' , 14 , 'bold'))

   if coolant_temp > 550:
       coolant_temp_indicator.color("red")
       coolant_temp_indicator_text.write("high coolant\n       temp" , False , 'center', font=('sans' , 14 , 'bold'))
   else:
       coolant_temp_indicator.color("#550000")
       coolant_temp_indicator_text.write("high coolant\n       temp" , False , 'center', font=('sans' , 14 , 'bold'))

   if button_coolant_pump == 1:
       button_coolant_pump_indicator.color("green")
       button_coolant_pump_indicator_text.write("coolant\n  pump" , False , 'center', font=('sans' , 14 , 'bold'))
       coolant_trip.color("#550000")
       coolant_trip_text.write("coolant\n  pump\n    trip" , False , 'center', font=('sans' , 14 , 'bold'))
   else:
       button_coolant_pump_indicator.color("#004000")
       button_coolant_pump_indicator_text.write("coolant\n  pump" , False , 'center', font=('sans' , 14 , 'bold'))

   if  turbine_rpm > 6000:
       turbine_rpm_indicator.color("red")
       turbine_rpm_indicator_text.write("      high \n turbine rpm" , False , 'center', font=('sans' , 14 , 'bold'))
   else:
       turbine_rpm_indicator.color("#550000")
       turbine_rpm_indicator_text.write("      high \n turbine rpm" , False , 'center', font=('sans' , 14 , 'bold'))

   if steam_flow_turbine_position > 0:
       steam_valve_open.color("green")
       steam_valve_open_text.write("steam valve\n      open" , False , 'center', font=('sans' , 14 , 'bold'))
   else:
       steam_valve_open.color("#004000")
       steam_valve_open_text.write("steam valve\n      open" , False , 'center', font=('sans' , 14 , 'bold'))

   if turbine_start == 1:
       turbine_online.color("green")
       turbine_online_text.write("turbine\n online" , False , 'center', font=('sans' , 14 , 'bold'))
       turbine_trip.color("#550000")
       turbine_trip_text.write("turbine\n   trip" , False , 'center', font=('sans' , 14 , 'bold'))
   else:
       turbine_online.color("#004000")
       turbine_online_text.write("turbine\n online" , False , 'center', font=('sans' , 14 , 'bold'))

   #int display
   reactor_temp_str = float(reactor_temp_str)
   reactor_temp_str = int(reactor_temp_str)
   reactor_temp_str = reactor_temp
   reactor_temp_str = int(reactor_temp_str)
   reactor_temp_str = str(reactor_temp_str)

   if reactor_temp >= 0 and reactor_temp <201:
       reactor_temp_display.color("#606060")
       reactor_temp_display_text.write("reactor temp\n           " + str(reactor_temp_str) , False , 'center', font=('sans' , 14 , 'bold'))


   if reactor_temp > 200 and reactor_temp < 451:
       reactor_temp_display.color("green")
       reactor_temp_display_text.write("reactor temp\n           " + str(reactor_temp_str) , False , 'center', font=('sans' , 14 , 'bold'))


   if reactor_temp > 450 and reactor_temp < 650:
       reactor_temp_display.color("orange")
       reactor_temp_display_text.write("reactor temp\n           " + str(reactor_temp_str) , False , 'center', font=('sans' , 14 , 'bold'))

   if reactor_temp > 649:
       reactor_temp_display.color("red")
       reactor_temp_display_text.write("reactor temp\n           " + str(reactor_temp_str) , False , 'center', font=('sans' , 14 , 'bold'))

   steam_valve_pressure_str = float(steam_valve_pressure_str)
   steam_valve_pressure_str = int(steam_valve_pressure_str)
   steam_valve_pressure_str = steam_valve_pressure
   steam_valve_pressure_str = int(steam_valve_pressure_str)
   steam_valve_pressure_str = str(steam_valve_pressure_str)

   if steam_valve_pressure >=0 and steam_valve_pressure <= 100:
      steam_valve_pressure_dispay.color("#606060")
      steam_valve_pressure_dispay_text.write("steam valve\n   pressure\n          " + str(steam_valve_pressure_str) , False , 'center', font=('sans' , 14 , 'bold'))

   if steam_valve_pressure >=101 and steam_valve_pressure <= 350:
      steam_valve_pressure_dispay.color("green")
      steam_valve_pressure_dispay_text.write("steam valve\n   pressure\n          " + str(steam_valve_pressure_str) , False , 'center', font=('sans' , 14 , 'bold'))

   if steam_valve_pressure >=351 and steam_valve_pressure <= 500:
      steam_valve_pressure_dispay.color("orange")
      steam_valve_pressure_dispay_text.write("steam valve\n   pressure\n          " + str(steam_valve_pressure_str) , False , 'center', font=('sans' , 14 , 'bold'))

   if steam_valve_pressure >=501:
      steam_valve_pressure_dispay.color("red")
      steam_valve_pressure_dispay_text.write("steam valve\n   pressure\n          " + str(steam_valve_pressure_str) , False , 'center', font=('sans' , 14 , 'bold'))


   coolant_temp_str = float(coolant_temp_str)
   coolant_temp_str = int(coolant_temp_str)
   coolant_temp_str = coolant_temp
   coolant_temp_str = int(coolant_temp_str)
   coolant_temp_str = str(coolant_temp_str)

   if coolant_temp >=0 and coolant_temp <= 100:
       coolant_temp_display.color("#606060")
       coolant_temp_display_text.write("coolant temp\n         " + str(coolant_temp_str) , False , 'center', font=('sans' , 14 , 'bold'))

   if coolant_temp >=101 and coolant_temp <= 400:
       coolant_temp_display.color("green")
       coolant_temp_display_text.write("coolant temp\n         " + str(coolant_temp_str) , False , 'center', font=('sans' , 14 , 'bold'))

   if coolant_temp >=401 and coolant_temp <= 550:
       coolant_temp_display.color("orange")
       coolant_temp_display_text.write("coolant temp\n         " + str(coolant_temp_str) , False , 'center', font=('sans' , 14 , 'bold'))

   if coolant_temp >=551:
       coolant_temp_display.color("red")
       coolant_temp_display_text.write("coolant temp\n         " + str(coolant_temp_str) , False , 'center', font=('sans' , 14 , 'bold'))

   turbine_rpm_str = float(turbine_rpm_str)
   turbine_rpm_str = int(turbine_rpm_str)
   turbine_rpm_str = turbine_rpm
   turbine_rpm_str = int(turbine_rpm_str)
   turbine_rpm_str = str(turbine_rpm_str)

   if turbine_rpm >=0 and turbine_rpm <= 1000:
       turbine_rpm_display.color("#606060")
       turbine_rpm_display_text.write("turbine rpm\n        " + str(turbine_rpm_str) , False , 'center', font=('sans' , 14 , 'bold'))

   if turbine_rpm >=1001 and turbine_rpm <= 4500:
       turbine_rpm_display.color("green")
       turbine_rpm_display_text.write("turbine rpm\n        " + str(turbine_rpm_str) , False , 'center', font=('sans' , 14 , 'bold'))

   if turbine_rpm >=4501 and turbine_rpm <= 6000:
       turbine_rpm_display.color("orange")
       turbine_rpm_display_text.write("turbine rpm\n        " + str(turbine_rpm_str) , False , 'center', font=('sans' , 14 , 'bold'))

   if turbine_rpm >=6001:
       turbine_rpm_display.color("red")
       turbine_rpm_display_text.write("turbine rpm\n        " + str(turbine_rpm_str) , False , 'center', font=('sans' , 14 , 'bold'))

   output_power_str = float(output_power_str)
   output_power_str = int(output_power_str)
   output_power_str = output_power
   output_power_str = int(output_power_str)
   output_power_str = str(output_power_str)

   if output_power >=0 and output_power <= 900:
       output_power_display.color("#606060")
       output_power_display_text.write("output power\n         " + str(output_power_str) , False , 'center', font=('sans' , 14 , 'bold'))

   if output_power >=901 and output_power <= 4400:
       output_power_display.color("green")
       output_power_display_text.write("output power\n         " + str(output_power_str) , False , 'center', font=('sans' , 14 , 'bold'))

   if output_power >=4501 and output_power <= 5900:
       output_power_display.color("orange")
       output_power_display_text.write("output power\n         " + str(output_power_str) , False , 'center', font=('sans' , 14 , 'bold'))

   if output_power >=5901:
       output_power_display.color("red")
       output_power_display_text.write("output power\n         " + str(output_power_str) , False , 'center', font=('sans' , 14 , 'bold'))

   time.sleep(1)
   print("reactor_temp =" , int(reactor_temp) , "C°")
   time.sleep(1)
   print("steam_valve_pressure =" , int(steam_valve_pressure) , "psi")
   time.sleep(1)
   print("turbine_rpm =" , int(turbine_rpm) , "rpm")
   time.sleep(1)
   print("output_power =" , int(output_power) , "MV")
   time.sleep(1)
   print("coolant_temp =" , int(coolant_temp) ,"C°\n")
   time.sleep(1)
   print("primary_coolant_position =" , int(primary_coolant_position) , "%")
   time.sleep(1)
   print("fuel_rod_position =" , int(fuel_rod_position) , "%")
   time.sleep(1)
   print("steam_flow_turbine_position =" , int(steam_flow_turbine_position), "%\n")
   time.sleep(2)
   if button_reactor_on == 1:
       print("reactor online")
       time.sleep(1)
   elif button_reactor_on == 0:
       print("reactor offline")
       time.sleep(1)
   if button_coolant_pump == 1:
       print("coolant pump online")
       time.sleep(1)
   elif button_coolant_pump == 0:
       print("coolant pump offline")
       time.sleep(1)
   if generator_on == 0:
       print("generator offline")
       time.sleep(1)
   elif generator_on == 1:
       print("generator online")
       time.sleep(1)

   print("\n")
   if reactor_temp > 750:
        print("your reactor exploded!")
        time.sleep(1)
        loop_game = False
        loop_gamma = False
        game_over = True
   elif reactor_temp > 650 and game_over is False:
        print("!!!CAUTION!!! \n --->REACTOR TEMP IS DANGEROUSLY HIGH")
        time.sleep(1)
        loop_game = True
        loop_gamma = True
        odds = random.randint(1, 100)
        if odds > 25:
            button_reactor_on = 0
            reactor_scram.color("red")
            reactor_scram_text.write("reactor\n scram" , False , 'center', font=('sans' , 14 , 'bold'))

   if coolant_temp > 550 and coolant_temp < 826 and game_over is False:
        print("!!!CAUTION!!! \n --->COOLANT TEMP IS DANGEROUSLY HIGH")
        time.sleep(1)
        loop_game = True
        loop_gamma = True
        odds = random.randint(1, 100)
        if odds > 25:
            button_coolant_pump = 0
            coolant_trip.color("red")
            coolant_trip_text.write("coolant\n  pump\n    trip" , False , 'center', font=('sans' , 14 , 'bold'))
   elif coolant_temp > 825:
         print("your coolant exploded!")
         time.sleep(1)
         loop_game = False
         loop_gamma = False
         game_over = True

   if steam_valve_pressure > 500 and steam_valve_pressure < 551 and game_over is False:
         print("!!!CAUTION!!! \n --->STEAM VALVE PRESSURE IS DANGEROUSLY HIGH")
         loop_game = True
         loop_gamma = True
         time.sleep(1)
   elif steam_valve_pressure > 550:
          print("your steam valves exploded!")
          time.sleep(1)
          loop_game = False
          loop_gamma = False
          game_over = True

   if turbine_rpm > 6000 and turbine_rpm < 7001 and game_over is False:
         print("!!!CAUTION!!! \n --->TURBINE RPM IS DANGEROUSLY HIGH")
         time.sleep(1)
         loop_game = True
         loop_gamma = True
         odds = random.randint(1, 100)
         if odds > 25:
             turbine_start = 0
             turbine_trip.color("red")
             turbine_trip_text.write("turbine\n   trip" , False , 'center', font=('sans' , 14 , 'bold'))

   elif turbine_rpm > 7000:
          print("you turbines exploded!")
          time.sleep(1)
          loop_game = False
          loop_gamma = False
          game_over = True

   if output_power > 5900 and output_power < 6801 and game_over is False:
         print("!!!CAUTION!!! \n --->OUTPUT POWER IS DANGEROUSLY HIGH")
         time.sleep(1)
         loop_game = True
         loop_gamma = True
         odds = random.randint(1, 100)
         if odds > 25:
            generator_on = 0
   elif output_power > 6800:
          print("you output_power generator exploded!")
          time.sleep(1)
          loop_game = False
          loop_gamma = False
          game_over = True
   elif output_power < 5901 and turbine_rpm < 6001 and steam_valve_pressure < 501 and coolant_temp < 551 and reactor_temp < 651:
       loop_game = True
       loop_gamma = True
   if game_over is True:
     time.sleep(2)
     print("--->game over<---")
     time.sleep(1)
     print("thank you for playing nuclear reactor simulator!")
     time.sleep(3)
     print("score board")
     time.sleep(1)

     if money_made > third and money_made < second:
         third = money_made
         name3 = input("insert gamer tag:")

     elif money_made > second and money_made < first:
        third = second
        name3 = name2
        second = money_made
        name2 = input("insert gamer tag:")

     elif money_made > first:
        third = second
        name3 = name2
        second = first
        name2 = name1
        first = money_made
        name1 = input("insert gamer tag:")
     else:
       print("\n you did not make it to the score board \n")

     time.sleep(0.3)
     print("------------->")
     time.sleep(0.3)
     print("1st place: made" , int(first) , "pounds by" , name1)
     time.sleep(1)
     print("2nd place: made" , int(second) , "pounds by" , name2)
     time.sleep(1)
     print("3rd place: made" , int(third) , "pounds by" , name3)
     print("\n\n")
     time.sleep(3)
     start = input("--->press enter to play<--- \n")
     time.sleep(1)
     print("--INITIALISING--")
     time.sleep(4)
     print("--RESET_COMPLETE--")
     time.sleep(0.5)
     print("--STARTING--")
     time.sleep(2)
     print("\n")
     time.sleep(0.1)
     print("\n")
     time.sleep(0.1)
     print("\n")
     time.sleep(0.1)
     print("\n")
     time.sleep(0.1)
     print("\n")
     time.sleep(0.1)
     print("\n")
     time.sleep(0.1)
     print("\n")
     time.sleep(0.1)
     print("\n")
     time.sleep(0.1)
     print("\n")
     time.sleep(0.1)
     print("\n")
     time.sleep(0.1)
